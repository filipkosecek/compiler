group templates ;

concat(code) ::= <<
<code; separator="\n">
>>

store(valueType, value, ptrType, ptr, emitCode) ::= <<
<if(emitCode)>store <valueType> <value>, <ptrType> <ptr>
<endif>
>>

program(programBody, globalVariables) ::= <<
declare i32 @scanf(i8*, ...)
declare i32 @printf(i8*, ...)

<globalVariables; separator="\n">

<programBody; separator="\n\n">
>>

globalString(name, size, body) ::= <<
<name> = global [<size> x i8] c"<body>\00"
>>

globalStringAccess(dest, name, size) ::= <<
<dest> = getelementptr [<size> x i8], [<size> x i8]* <name>, i32 0, i32 0
>>

paramInit(destReg, type, initValue, ptrType) ::= <<
<destReg> = alloca <type>
store <type> <initValue>, <ptrType> <destReg>
>>

functionDef(firstLabel, returnType, name, argumentList, code, paramInit, voidFunction) ::= <<
define <returnType> @<name>(<argumentList>)
{
init:
	<paramInit; separator="\n">
	br label %<firstLabel>
	<code>
<if(voidFunction)>
    ret void
<else>
    ret <returnType> 0
<endif>
}
>>

dereference(destType, destReg, ptrType, ptr) ::= <<
<destReg> = load <destType>, <ptrType> <ptr>
>>

writeExpression(valueType, value, ptrType, ptr, expressionCode) ::= <<
<expressionCode>
store <valueType> <value>, <ptrType> <ptr>
>>

arrayIndexing(tmpReg, destReg, ptrReg, destType, ptrType, indexType, indexReg, expressionCode) ::= <<
<expressionCode>
<tmpReg> = getelementptr <destType>, <ptrType> <ptrReg>, <indexType> <indexReg>
<destReg> = load <destType>, <ptrType> <tmpReg>
>>

arrayGetPtr(exprCode, destReg, destType, ptrType, ptrReg, indexType, index) ::= <<
<exprCode; separator="\n">
<destReg> = getelementptr <destType>, <ptrType> <ptrReg>, <indexType> <index>
>>

arrayMultiLevelIndexing(indexing) ::= <<
<indexing; separator="\n">
>>

arrayWrite(tmpReg, valueType, value, ptrType, ptr, indexType, index, previousCode, expressionCode) ::= <<
<expressionCode>
<previousCode; separator="\n">
<tmpReg> = getelementptr <valueType>, <ptrType> <ptr>, <indexType>, <index>
store <valueType> <value>, <ptrType> <tmpReg>
>>

codeBlock(lines) ::= <<
<lines; separator="\n">
>>

argList(arg) ::= <<
<arg; separator=", ">
>>

functionCall(destReg, returnValue, returnType, id, argList, computeParameters) ::= <<
<computeParameters>
<if(returnValue)><destReg> = call <returnType> @<id>(<argList>)
<else>call <returnType> @<id>(<argList>)
<endif>
>>

/* same signature begin */
bitcast(destReg, srcType, value, destType) ::= <<
<destReg> = bitcast <srcType> <value> to <destType>
>>

zeroExtend(destReg, srcType, value, destType) ::= <<
<destReg> = zext <srcType> <value> to <destType>
>>

signExtend(destReg, srcType, value, destType) ::= <<
<destReg> = sext <srcType> <value> to <destType>
>>

truncate(destReg, srcType, value, destType) ::= <<
<destReg> = trunc <srcType> <value> to <destType>
>>
/* same signature end */

logicalNot(destReg, type, value, valueCode) ::= <<
<valueCode>
<destReg> = icmp eq <type> 0, <value>
>>

/* same signature begin */
/* tmpReg is here just for compatibility with relation operations */
subtract(destReg, type, value1, value2, tmpReg) ::= <<
<destReg> = sub <type> <value1>, <value2>
>>

multiplication(destReg, type, value1, value2, tmpReg) ::= <<
<destReg> = mul <type> <value1>, <value2>
>>

addition(destReg, type, value1, value2, tmpReg) ::= <<
<destReg> = add <type> <value1>, <value2>
>>

signedModulo(destReg, type, value1, value2, tmpReg) ::= <<
<destReg> = srem <type> <value1>, <value2>
>>

unsignedModulo(destReg, type, value1, value2, tmpReg) ::= <<
<destReg> = urem <type> <value1>, <value2>
>>

cmpEQ(destReg, type, value1, value2, tmpReg) ::= <<
<tmpReg> = icmp eq <type> <value1>, <value2>
<destReg> = zext i1 <tmpReg> to <type>
>>

cmpNE(destReg, type, value1, value2, tmpReg) ::= <<
<tmpReg> = icmp ne <type> <value1>, <value2>
<destReg> = zext i1 <tmpReg> to <type>
>>

cmpUGT(destReg, type, value1, value2, tmpReg) ::= <<
<tmpReg> = icmp ugt <type> <value1>, <value2>
<destReg> = zext i1 <tmpReg> to <type>
>>

cmpUGE(destReg, type, value1, value2, tmpReg) ::= <<
<tmpReg> = icmp uge <type> <value1>, <value2>
<destReg> = zext i1 <tmpReg> to <type>
>>

cmpULT(destReg, type, value1, value2, tmpReg) ::= <<
<tmpReg> = icmp ult <type> <value1>, <value2>
<destReg> = zext i1 <tmpReg> to <type>
>>

cmpULE(destReg, type, value1, value2, tmpReg) ::= <<
<tmpReg> = icmp ule <type> <value1>, <value2>
<destReg> = zext i1 <tmpReg> to <type>
>>

cmpSGT(destReg, type, value1, value2, tmpReg) ::= <<
<tmpReg> = icmp sgt <type> <value1>, <value2>
<destReg> = zext i1 <tmpReg> to <type>
>>

cmpSGE(destReg, type, value1, value2, tmpReg) ::= <<
<tmpReg> = icmp sge <type> <value1>, <value2>
<destReg> = zext i1 <tmpReg> to <type>
>>

cmpSLT(destReg, type, value1, value2, tmpReg) ::= <<
<tmpReg> = icmp slt <type> <value1>, <value2>
<destReg> = zext i1 <tmpReg> to <type>
>>

cmpSLE(destReg, type, value1, value2, tmpReg) ::= <<
<tmpReg> = icmp sle <type> <value1>, <value2>
<destReg> = zext i1 <tmpReg> to <type>
>>
/* same signature end */

/* same signature begin */
logicalAnd(destReg, type, value1, value2, tmp1, tmp2, tmp3, expressionCode1, expressionCode2) ::= <<
<expressionCode1>
<expressionCode2>
<tmp1> = icmp ne <type> 0, <value1>
<tmp2> = icmp ne <type> 0, <value2>
<tmp3> = and i1 <tmp1>, <tmp2>
<destReg> = zext i1 <tmp3> to <type>
>>

logicalOr(destReg, type, value1, value2, tmp1, tmp2, tmp3, expressionCode1, expressionCode2) ::= <<
<expressionCode1>
<expressionCode2>
<tmp1> = icmp ne <type> 0, <value1>
<tmp2> = icmp ne <type> 0, <value2>
<tmp3> = or i1 <tmp1>, <tmp2>
<destReg> = zext i1 <tmp3> to <type>
>>
/* same signature end */

declarationBlock(code) ::= <<
<code; separator="\n">
>>

simpleVarDeclaration(reg, type, init, value, ptrType, expressionCode) ::= <<
<if(init)><expressionCode>
<endif>
<reg> = alloca <type>
<if(init)>store <type> <value>, <ptrType> <reg>
<endif>
>>

codeFragment(code, jump, label) ::= <<
<code>
<if(jump)>br label %<label>
<endif>
>>

concatCodeBlock(code, addFirstLabel, firstLabel) ::= <<
<if(addFirstLabel)><firstLabel>:
<endif>
<code; separator="\n">
>>

while(tmpReg, expressionCode, expressionType, expressionReg, labelBody, addBodyLabel, labelBegin, labelEnd, bodyCodeBlock) ::= <<
<labelBegin>:
<expressionCode>
<tmpReg> = icmp ne <expressionType> <expressionReg>, 0
br i1 <tmpReg>, label %<labelBody>, label %<labelEnd>
<if(addBodyLabel)><labelBody>
<endif>
<bodyCodeBlock>
br label %<labelBegin>
<labelEnd>:
>>

return(retReg, type, expressionCode) ::= <<
<expressionCode>
ret <type> <retReg>
>>

if(exprCode, exprType, exprReg, tmpReg, addBodyLabel, ifBodyLabel, ifBodyCode, labelEnd, next, elif, else_) ::= <<
<exprCode>
<tmpReg> = icmp ne <exprType> 0, <exprReg>
br i1 <tmpReg>, label %<ifBodyLabel>, label %<next>
<if(addBodyLabel)><ifBodyLabel>:
<endif>
<ifBodyCode>
br label %<labelEnd>
<elif; separator="\n">
<else_>
<labelEnd>:
>>

elif(firstLabel, exprCode, exprType, exprReg, tmpReg, next, addCodeBodyLabel, codeBodyLabel, codeBody, labelEnd) ::= <<
<firstLabel>:
<exprCode>
<tmpReg> = icmp ne <exprType> 0, <exprReg>
br i1 <tmpReg>, label %<codeBodyLabel>, label %<next>
<if(addCodeBodyLabel)><codeBodyLabel>:
<endif>
<codeBody>
br label %<labelEnd>
>>

else_(firstLabel, addFirstLabel, code, labelEnd) ::= <<
<if(addFirstLabel)><firstLabel>:
<endif>
<code>
br label %<labelEnd>
>>

continue(begLoopLabel) ::= <<
br label %<begLoopLabel>
>>

break(endLoopLabel) ::= <<
br label %<endLoopLabel>
>>

callPrintf(exprCode, tmpReg, formatStringSize, formatStringName, valueType, value) ::= <<
<exprCode>
<tmpReg> = getelementptr [<formatStringSize> x i8], [<formatStringSize> x i8]* <formatStringName>, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* <tmpReg>, <valueType> <value>)
>>

callPrintfEndline(tmpReg, formatStringSize, formatStringName) ::= <<
<tmpReg> = getelementptr [<formatStringSize> x i8], [<formatStringSize> x i8]* <formatStringName>, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* <tmpReg>)
>>

scanf(exprCode, tmpReg, formatStringSize, formatStringName, ptrType, ptr) ::= <<
<exprCode; separator="\n">
<tmpReg> = getelementptr [<formatStringSize> x i8], [<formatStringSize> x i8]* <formatStringName>, i32 0, i32 0
call i32 (i8*, ...) @scanf(i8* <tmpReg>, <ptrType> <ptr>)
>>

alloca(dest, type) ::= <<
<dest> = alloca <type>
>>

allocInit(exprCode, indicesInitCode) ::= <<
<exprCode; separator="\n">
<indicesInitCode; separator="\n">
>>

firstAllocLoop(resultReg, allocPtrType, addSubLoop, subLoopLabel, subLoop, allocAmountType, allocAmountReg, init, endLabel) ::= <<
<init>
<resultReg> = alloca <allocPtrType>, <allocAmountType> <allocAmountReg>
<if(addSubLoop)>
br label %<subLoopLabel>
<subLoop>
<endLabel>:
<endif>
>>

allocLoop(begLoopLabel, loopHeaderLabel, bodyLabel, addSubLoop, subLoop, subLoopLabel,
iType, i, allocPtrType, parentPtrType, parentPtr, endLabel, incLabel,
cmp, reg1, reg2, reg4, reg5, currentPtrType,
allocAmountParentType, allocAmountParentReg, allocAmountCurrentType, allocAmountCurrentReg) ::= <<
<begLoopLabel>:
store <allocAmountParentType> 0, <iType> <i>
br label %<loopHeaderLabel>
<loopHeaderLabel>:
<reg1> = load <allocAmountParentType>, <iType> <i>
<cmp> = icmp ult <allocAmountParentType> <reg1>, <allocAmountParentReg>
br i1 <cmp>, label %<bodyLabel>, label %<endLabel>
<bodyLabel>:
<reg4> = alloca <allocPtrType>, <allocAmountCurrentType> <allocAmountCurrentReg>
<reg5> = getelementptr <currentPtrType>, <parentPtrType> <parentPtr>, <allocAmountParentType> <reg1>
store <currentPtrType> <reg4>, <parentPtrType> <reg5>
<if(addSubLoop)>
br label %<subLoopLabel>
<subLoop>
<else>br label %<incLabel>
<endif>
<incLabel>:
<reg2> = add <allocAmountParentType> <reg1>, 1
store <allocAmountParentType> <reg2>, <iType> <i>
br label %<loopHeaderLabel>
>>
