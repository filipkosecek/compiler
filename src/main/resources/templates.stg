group templates ;

program(programBody, globalVariables) ::= <<
declare i32 @scanf(i8*, ...)
declare i32 @printf(i8*, ...)

<globalVariables; separator="\n">

<programBody; separator="\n\n">
>>

globalString(name, size, body) ::= <<
<name> = global [<size> x i8] c"<body>\00"
>>

globalStringAccess(dest, name, size) ::= <<
<dest> = getelementptr [<size> x i8], [<size> x i8]* <name>
>>

paramInit(destReg, type, initValue, ptrType) ::= <<
<destReg> = alloca <type>
store <type> <initValue>, <ptrType> <destReg>
>>

functionDef(returnType, name, argumentList, code, label, paramInit) ::= <<
define <returnType> @<name>(<argumentList>)
{
<label>:
	<paramInit; separator="\n">
	<code>
}
>>

dereference(destType, destReg, ptrType, ptr) ::= <<
<destReg> = load <destType>, <ptrType> <ptr>
>>

writeExpression(valueType, value, ptrType, ptr, expressionCode) ::= <<
<expressionCode>
store <valueType> <value>, <ptrType> <ptr>
>>

arrayIndexing(tmpReg, destReg, ptrReg, destType, ptrType, indexType, indexReg, previousCode) ::= <<
<tmpReg> = getelementptr <destType>, <ptrType> <ptrReg>, <indexType> <indexReg>
<destReg> = load <destType>, <ptrType> <tmpReg>
>>

arrayMultiLevelIndexing(indexing) ::= <<
<indexing; separator="\n">
>>

arrayWrite(tmpReg, valueType, value, ptrType, ptr, indexType, index, previousCode, expressionCode) ::= <<
<expressionCode>
<previousCode; separator="\n">
<tmpReg> = getelementptr <valueType>, <ptrType> <ptr>, <indexType>, <index>
store <valueType> <value>, <ptrType> <tmpReg>
>>

codeBlock(lines) ::= <<
<lines; separator="\n">
>>

argList(arg) ::= <<
<arg; separator=", ">
>>

functionCall(destReg, returnValue, returnType, id, argList, computeParameters) ::= <<
<computeParameters>
<if(returnValue)><destReg> = call <returnType> <id>(<argList>)
<else>call <returnType> <id>(<argList>)
<endif>
>>

zeroExtend(destReg, srcType, value, destType) ::= <<
<destReg> = zext <srcType> <value> to <destType>
>>

signExtend(destReg, srcType, value, destType) ::= <<
<destReg> = sext <srcType> <value> to <destType>
>>

truncate(destReg, srcType, value, destType) ::= <<
<destReg> = trunc <srcType> <value> to <destType>
>>
