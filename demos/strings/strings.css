int strlen(byte s[])
{
	int i = 0;
	while (s[i] != (byte) 0) {
		i = i + 1;
	}
	return i;
}

int strcmp(byte s1[], byte s2[])
{
	int i = 0;
	while (s1[i] != (byte) 0 && s2[i] != (byte) 0) {
		if (s1[i] < s2[i]) {
			return -1;
		}
		if (s1[i] > s2[i]) {
			return 1;
		}
		i = i + 1;
	}
	if (s1[i] == (byte) 0 && s2[i] != (byte) 0) {
		return -1;
	}
	if (s1[i] != (byte) 0 && s2[i] == (byte) 0) {
		return 1;
	}
	return 0;
}

void strcpy(byte dest[], byte src[])
{
	int i = 0;
	while (src[i] != (byte) 0) {
		dest[i] = src[i];
		i = i + 1;
	}
	dest[i] = (byte) 0;
}

void strcat(byte dest[], byte src[])
{
	int i = 0, j = 0;
	while (dest[i] != (byte) 0) {
		i = i + 1;
	}
	while (src[j] != (byte) 0) {
		dest[i] = src[j];
		i = i + 1;
		j = j + 1;
	}
	dest[i] = (byte) 0;
}

void sort(byte s[][], int n, int max_size)
{
	byte tmp_string[max_size];
	int i = 0, j;
	while (i < n) {
		j = 0;
		while (j < n - i - 1) {
			if (strcmp(s[j], s[j+1]) > 0) {
				strcpy(tmp_string, s[j]);
				strcpy(s[j], s[j + 1]);
				strcpy(s[j + 1], tmp_string);
			}
			j = j + 1;
		}
		i = i + 1;
	}
}

int main()
{
	int n, max_size, i = 0;
	==>n;
	==>max_size;
	byte s[n][max_size + 1];
	while (i < n) {
		==>s[i];
		i = i + 1;
	}
	sort(s, n, max_size);
	<=="---------------------";
	<==;
	i = 0;
	while (i < n) {
		<==s[i];
		<==;
		i = i + 1;
	}
	return 0;
}
